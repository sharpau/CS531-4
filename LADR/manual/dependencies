  flag_flag_dependency(p->paramodulation,     TRUE, p->back_demod,       TRUE);
  flag_parm_dependency(p->para_units_only,    TRUE, p->para_lit_limit,      1);
  flag_flag_dependency(p->back_unit_deletion, TRUE, p->unit_deletion,    TRUE);
  flag_flag_dependency(p->ur_resolution, TRUE,  p->pos_ur_resolution, TRUE);
  flag_flag_dependency(p->ur_resolution, TRUE,  p->neg_ur_resolution, TRUE);
  flag_parm_dependency(p->lex_dep_demod, FALSE, p->lex_dep_demod_lim, 0);
  flag_parm_dependency(p->lex_dep_demod,  TRUE, p->lex_dep_demod_lim, INT_MAX);
  flag_parm_dependency(p->breadth_first,    TRUE,  p->age_part,        1);
  flag_parm_dependency(p->breadth_first,    TRUE,  p->true_part,    0);
  flag_parm_dependency(p->breadth_first,    TRUE,  p->false_part,    0);
  flag_parm_dependency(p->unfold_eq,    TRUE,  p->unfold_eq_limit, INT_MAX);
  flag_parm_dependency(p->unfold_eq,   FALSE,  p->unfold_eq_limit,      -1);
  flag_flag_dependency(p->unfold_eq,    TRUE,  p->fold_eq,           FALSE);
  flag_flag_dependency(p->fold_eq,      TRUE,  p->unfold_eq,         FALSE);
  parm_parm_dependency(p->pick_given_ratio, p->age_part,          1);
  parm_parm_dependency(p->pick_given_ratio, p->true_part,   INT_MIN); // copy
  parm_parm_dependency(p->pick_given_ratio, p->false_part,        0);
  flag_flag_dependency(p->default_output, TRUE, p->quiet,               FALSE);
  flag_flag_dependency(p->default_output, TRUE, p->echo_input,           TRUE);
  flag_flag_dependency(p->default_output, TRUE, p->print_initial_clauses,TRUE);
  flag_flag_dependency(p->default_output, TRUE, p->print_given,          TRUE);
  flag_flag_dependency(p->default_output, TRUE, p->print_subproblems,    TRUE);
  flag_flag_dependency(p->default_output, TRUE, p->print_proofs,         TRUE);
  flag_stringparm_dependency(p->default_output, TRUE, p->stats,        "lots");
  flag_flag_dependency(p->default_output, TRUE, p->print_kept,          FALSE);
  flag_flag_dependency(p->default_output, TRUE, p->print_gen,           FALSE);
  flag_flag_dependency(p->automatic, TRUE, p->auto1,             TRUE);
  flag_flag_dependency(p->auto1, TRUE, p->auto_inference,        TRUE);
  flag_flag_dependency(p->auto1, TRUE, p->predicate_elimination, TRUE);
  flag_flag_dependency(p->auto1, TRUE, p->unfold_eq,             TRUE);
  flag_flag_dependency(p->auto1, TRUE, p->inverse_order,         TRUE);
  flag_parm_dependency(p->auto1, TRUE, p->lex_dep_demod_lim,       11);
  flag_flag_dependency(p->auto1, TRUE, p->lex_dep_demod_sane,    TRUE);
  flag_parm_dependency(p->auto1, TRUE, p->max_weight,             100);
  flag_parm_dependency(p->auto1, TRUE, p->age_part,                 1);
  flag_parm_dependency(p->auto1, TRUE, p->true_part,                2);
  flag_parm_dependency(p->auto1, TRUE, p->false_part,               2);
  flag_parm_dependency(p->auto1, TRUE, p->sos_limit,            10000);
  flag_stringparm_dependency(p->auto1, TRUE, p->stats,          "lots");
  flag_parm_dependency(p->auto1, TRUE, p->max_megs,               200);
  flag_flag_dependency(p->auto1, TRUE, clocks_id(),             FALSE);
  flag_flag_dependency(p->auto2, TRUE, p->auto1,                 TRUE);
  flag_flag_dependency(p->auto2, TRUE, p->fof_reduction,         TRUE);
  flag_parm_dependency(p->auto2, TRUE, p->new_constants,            1);
  flag_parm_dependency(p->auto2, TRUE, p->fold_denial_max,          3);
  flag_parm_dependency(p->auto2, TRUE, p->max_weight,             200);
  flag_parm_dependency(p->auto2, TRUE, p->nest_penalty,             1);
  flag_parm_dependency(p->auto2, TRUE, p->skolem_penalty,           3);
  flag_parm_dependency(p->auto2, TRUE, p->sk_constant_weight,       0);
  flag_parm_dependency(p->auto2, TRUE, p->prop_atom_weight,         5);
  flag_flag_dependency(p->auto2, TRUE, p->sort_initial_sos,       TRUE);
  flag_parm_dependency(p->auto2, TRUE, p->sos_limit,           INT_MAX);
  flag_parm_dependency(p->auto2, TRUE, p->lrs_ticks,              3000);
  flag_parm_dependency(p->auto2, TRUE, p->max_megs,                400);
  flag_stringparm_dependency(p->auto2, TRUE, p->stats,          "some");
  flag_flag_dependency(p->auto2, TRUE, p->echo_input,            FALSE);
  flag_flag_dependency(p->auto2, TRUE, p->quiet,                  TRUE);
  flag_flag_dependency(p->auto2, TRUE, p->print_subproblems,     FALSE);
  flag_flag_dependency(p->auto2, TRUE, p->print_initial_clauses, FALSE);
  flag_flag_dependency(p->auto2, TRUE, p->print_given,           FALSE);
